use std::thread; // Импортируем модуль thread для создания и управления потоками
use std::sync::mpsc; // Импортируем модуль mpsc для работы с каналами

fn main() {
    let n = 100; // Задаем количество чисел в исходном векторе
    let numbers: Vec<i32> = (1..=n).collect(); // Инициализируем массив чисел 1..N

    let num_threads = 4; // Количество потоков
    let chunk_size = (n as f32 / num_threads as f32).ceil() as usize; // Размер куска для разделения массива
    let (tx, rx) = mpsc::channel(); // Создание канала для передачи данных между потоками

    // Проходим по кускам массива
    for chunk in numbers.chunks(chunk_size) {
        let tx = tx.clone(); // Клонирование отправителя для использования в новом потоке
        let chunk = chunk.to_vec(); // Копируем текущий кусок для передачи в поток

        // Создаем новый поток для каждого куска
        thread::spawn(move || {
            // Вычисляем сумму квадратов для текущего чанка
            let sum_of_squares: i32 = chunk.iter().map(|&x| x * x).sum(); // Сумма квадратов
            tx.send(sum_of_squares).unwrap(); // Отправляем результат в канал
        });
    }

    // Закрытие отправителя после завершения всех потоков
    drop(tx); // Позволяет завершить рабочий поток, когда все отправители закрыты

    // Суммируем конечный результат
    let total_sum_of_squares: i32 = rx.iter().sum();
    println!("Сумма квадратов чисел от 1 до {}: {}", n, total_sum_of_squares);
}
